{"version":3,"sources":["scripts/main.js"],"names":["idURL","url","ids","getAllIds","getFirstReceivedDetails","phonesIds","requests","map","phoneId","fetch","then","response","json","Promise","race","getAllSuccessfulDetails","allSettled","getThreeFastestDetails","phonesDetails","phoneDetails","length","push","all","result","phone","id","firstReceivedDetails","allSuccessfulReceivedDetails","threeFastestDetails","details","firstReceivedPhone","document","createElement","header","phonesList","li","className","innerText","append","name","body","responses","successfulResponses","filter","status","allSuccesfulReceivedPhones","receviedPhones","forEach","successfulResponse","value","toUpperCase","phones"],"mappings":";AAAA,aAEA,IAAMA,EAAQ,oEAERC,EAAM,wEAGNC,EAAMC,IA2DZ,SAASC,EAAwBC,GACzBC,IAAAA,EAAWD,EAAUE,IAAI,SAAAC,GACtBC,OAAAA,MAAMT,EAAWQ,GAAAA,OAAAA,EAAZ,UACTE,KAAK,SAAAC,GAAYA,OAAAA,EAASC,WAGxBC,OAAAA,QAAQC,KAAKR,GAGtB,SAASS,EAAwBV,GACzBC,IAAAA,EAAWD,EAAUE,IAAI,SAAAC,GACtBC,OAAAA,MAAMT,EAAWQ,GAAAA,OAAAA,EAAZ,UACTE,KAAK,SAAAC,GAAYA,OAAAA,EAASC,WAGxBC,OAAAA,QAAQG,WAAWV,GAG5B,SAASW,EAAuBZ,GACxBa,IAAAA,EAAgB,GAEhBZ,EAAWD,EAAUE,IAAI,SAAAC,GACtBC,OAAAA,MAAMT,EAAWQ,GAAAA,OAAAA,EAAZ,UACTE,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAC1BF,KAAK,SAAAS,GACAD,EAAcE,OAAS,GACzBF,EAAcG,KAAKF,OAKpBN,OAAAA,QAAQS,IAAIhB,GAGrB,SAASH,IACAM,OAAAA,MAAMR,GACVS,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SA7F/BV,EACGQ,KAAK,SAAAa,GACElB,IAAAA,EAAYkB,EAAOhB,IAAI,SAAAiB,GAASA,OAAAA,EAAMC,KAEtCC,EAAuBtB,EAAwBC,GAE/CsB,EAA+BZ,EAAwBV,GAEvDuB,EAAsBX,EAAuBZ,GAEnDqB,EACGhB,KAAK,SAAAmB,GACEC,IAAAA,EAAqBC,SAASC,cAAc,OAC5CC,EAASF,SAASC,cAAc,MAChCE,EAAaH,SAASC,cAAc,MACpCG,EAAKJ,SAASC,cAAc,MAElCF,EAAmBM,UAAY,iBAC/BH,EAAOI,UAAY,iBACnBP,EAAmBQ,OAAOL,GAC1BH,EAAmBQ,OAAOJ,GAC1BC,EAAGE,UAAqBR,SAAAA,OAAAA,EAAQU,KAAeV,YAAAA,OAAAA,EAAQJ,IACvDS,EAAWI,OAAOH,GAElBJ,SAASS,KAAKF,OAAOR,KAGzBH,EACGjB,KAAK,SAAA+B,GACEC,IAAAA,EAAsBD,EAAUE,OAAO,SAAAhC,GACpCA,MAAoB,cAApBA,EAASiC,SAGZC,EAA6Bd,SAASC,cAAc,OACpDC,EAASF,SAASC,cAAc,MAChCc,EAAiBf,SAASC,cAAc,MAE9Ca,EAA2BT,UAAY,iBACvCH,EAAOI,UAAY,iBACnBQ,EAA2BP,OAAOL,GAClCY,EAA2BP,OAAOQ,GAElCJ,EAAoBK,QAAQ,SAAAC,GACpBb,IAAAA,EAAKJ,SAASC,cAAc,MAElCG,EAAGE,UAAY,SAASW,OAAAA,EAAmBC,MAAMV,KACrCS,KAAAA,UAAAA,OAAAA,EAAmBC,MAAMxB,GAAGyB,eACxCJ,EAAeR,OAAOH,KAGxBJ,SAASS,KAAKF,OAAOO,KAGzBjB,EACGlB,KAAK,SAAAyC,GAAUA,OAAAA","file":"main.a03d790a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst idURL = 'https://mate-academy.github.io/'\n+ 'phone-catalogue-static/api/phones/';\nconst url = 'https://mate-academy.github.io/'\n+ 'phone-catalogue-static/api/phones.json';\n\nconst ids = getAllIds();\n\nids\n  .then(result => {\n    const phonesIds = result.map(phone => phone.id);\n\n    const firstReceivedDetails = getFirstReceivedDetails(phonesIds);\n\n    const allSuccessfulReceivedDetails = getAllSuccessfulDetails(phonesIds);\n\n    const threeFastestDetails = getThreeFastestDetails(phonesIds);\n\n    firstReceivedDetails\n      .then(details => {\n        const firstReceivedPhone = document.createElement('div');\n        const header = document.createElement('h1');\n        const phonesList = document.createElement('ul');\n        const li = document.createElement('li');\n\n        firstReceivedPhone.className = 'first-received';\n        header.innerText = 'First Received';\n        firstReceivedPhone.append(header);\n        firstReceivedPhone.append(phonesList);\n        li.innerText = `Name: ${details.name},\\n Id: ${details.id}`;\n        phonesList.append(li);\n\n        document.body.append(firstReceivedPhone);\n      });\n\n    allSuccessfulReceivedDetails\n      .then(responses => {\n        const successfulResponses = responses.filter(response => {\n          return response.status === 'fulfilled';\n        });\n\n        const allSuccesfulReceivedPhones = document.createElement('div');\n        const header = document.createElement('h1');\n        const receviedPhones = document.createElement('ul');\n\n        allSuccesfulReceivedPhones.className = 'all-successful';\n        header.innerText = 'All Successful';\n        allSuccesfulReceivedPhones.append(header);\n        allSuccesfulReceivedPhones.append(receviedPhones);\n\n        successfulResponses.forEach(successfulResponse => {\n          const li = document.createElement('li');\n\n          li.innerText = `Name: ${successfulResponse.value.name},`\n          + `\\n Id: ${successfulResponse.value.id.toUpperCase()}`;\n          receviedPhones.append(li);\n        });\n\n        document.body.append(allSuccesfulReceivedPhones);\n      });\n\n    threeFastestDetails\n      .then(phones => phones);\n  });\n\nfunction getFirstReceivedDetails(phonesIds) {\n  const requests = phonesIds.map(phoneId => {\n    return fetch(idURL + `${phoneId}.json`)\n      .then(response => response.json());\n  });\n\n  return Promise.race(requests);\n}\n\nfunction getAllSuccessfulDetails(phonesIds) {\n  const requests = phonesIds.map(phoneId => {\n    return fetch(idURL + `${phoneId}.json`)\n      .then(response => response.json());\n  });\n\n  return Promise.allSettled(requests);\n}\n\nfunction getThreeFastestDetails(phonesIds) {\n  const phonesDetails = [];\n\n  const requests = phonesIds.map(phoneId => {\n    return fetch(idURL + `${phoneId}.json`)\n      .then(response => response.json())\n      .then(phoneDetails => {\n        if (phonesDetails.length < 3) {\n          phonesDetails.push(phoneDetails);\n        }\n      });\n  });\n\n  return Promise.all(requests);\n}\n\nfunction getAllIds() {\n  return fetch(url)\n    .then(response => response.json());\n}\n"]}